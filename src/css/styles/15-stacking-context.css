@import '/src/common/best-reset.css';
@import '/src/common/theme.css';
/* 아바타 css 불러오는 순간 컴퍼넌트 꾸미기 적용됨 */
@import '/src/ui/components/avatar/avatar.css';

body {
  margin: 50px;
}
h1 {
  margin-block: 20px;
}

/* Stacking context */
/* case 1 */
.case-01 {
  background: yellow;
  /* button의 기본 디스플레이는 inline-block인데, 인라인블록의 특성은 공백문자가 호환이 되기 때문에, x축방향으로 배치될때 눈에 보이지 않지만
    공백이 생긴다. -> 이때 트릭은 font-size:0;을 줄수 있다. 그러나 이 트릭은 만약 텍스트노드가 있을때 못 읽을 수 있는 사이드 이펙트가 일어날 수 있다.
    -> 그러므로 이때 공백을 없애고 싶을때엔? 부모 영역에 flex를 준다.*/
  /* display: flex; */
  flex-flow: row nowrap;

  .button-avatar {
    margin-right: -20px;
    position: static;
    /* 트랜지션은 숏핸드 */
    transition: rotate 2000ms;
    /* filter: blur(5px); */

    &:hover,
    &:focus {
      /* 아바타의 겹치는 순서를 제어하기 위해 0보다 큰 값 지정 */
      /* position이 static이 아닐 경우만 가능 (z-index) */
      z-index: 10;
      /* 변환 */
      transform: scale(1.5) translate(0, -20px);
      /* 투명도 주기 */
      /* opacity: 0.8; */
      /* transform: translate(0, -20px); */
      rotate: -3turn;
      filter: sepia(60%);
    }

    &::after {
      display: none;
    }
  }
}

/* Transition */
/* case 2 */
.case-02 {
  margin-block-start: 20px;
  display: flex;
  gap: 20px;

  [class^='area'] {
    inline-size: 100px;
    block-size: 100px;
    border: 1px solid currentColor;
    text-align: center;
    align-content: center;
    background: var(--pastel-lavender);
    /* transition-property: background,border-radius;
        transition-duration: 2s ,1s;
        transition-delay: 0s, 0.2s;
        transition-timing-function: ease; */
    /* transition 관련 단축 속성 */
    /* transition: 
            background 2s 0s ease,
            boder-radious 1s 2s ease; */
    transition: all 200ms;

    &:hover {
      background: var(--pastel-orange);
      border-radius: 50%;
    }
  }
}
